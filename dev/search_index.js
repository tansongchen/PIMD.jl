var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Quantum-System","page":"API","title":"Quantum System","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"OneDimensionalQuantumSystem","category":"page"},{"location":"api/#PIMD.OneDimensionalQuantumSystem","page":"API","title":"PIMD.OneDimensionalQuantumSystem","text":"OneDimensionalQuantumSystem(β, m, potential)\n\nCreates an 1D quantum system with temperature β and Hamiltonian H=p^22m+V(x).\n\n\n\n\n\n","category":"type"},{"location":"api/#Classical-System","page":"API","title":"Classical System","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Primitive","category":"page"},{"location":"api/#PIMD.Primitive","page":"API","title":"PIMD.Primitive","text":"Primitive(quantum, n)\n\nCreates an primitive isomorphic PIMD system from a quantum system, with beads number n.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Staging","category":"page"},{"location":"api/#PIMD.Staging","page":"API","title":"PIMD.Staging","text":"Staging(quantum, n)\n\nCreates an staging isomorphic PIMD system from a quantum system, with beads number n.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Normal","category":"page"},{"location":"api/#PIMD.Normal","page":"API","title":"PIMD.Normal","text":"Normal(quantum, n)\n\nCreates an normal isomorphic PIMD system from a quantum system, with beads number n.\n\n\n\n\n\n","category":"type"},{"location":"api/#Propagators","page":"API","title":"Propagators","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"KineticPropagator","category":"page"},{"location":"api/#PIMD.KineticPropagator","page":"API","title":"PIMD.KineticPropagator","text":"KineticPropagator(Δt)\n\nCreates a propagator that updates positions according to the canonical equation\n\nboldsymbol qleftarrowboldsymbol q+fracpartial Hpartialboldsymbol pDelta t\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"PotentialPropagator","category":"page"},{"location":"api/#PIMD.PotentialPropagator","page":"API","title":"PIMD.PotentialPropagator","text":"KineticPropagator(Δt)\n\nCreates a propagator that updates momenta according to the canonical equation\n\nboldsymbol pleftarrowboldsymbol p-fracpartial Hpartialboldsymbol qDelta t\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"ExternalPotentialPropagator","category":"page"},{"location":"api/#PIMD.ExternalPotentialPropagator","page":"API","title":"PIMD.ExternalPotentialPropagator","text":"ExternalKineticPropagator(Δt)\n\nCreates a propagator that updates momenta according to the canonical equation, with PIMD external potential only\n\nboldsymbol pleftarrowboldsymbol p-fracpartial V_rm extpartialboldsymbol qDelta t\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"GeneralizedCayleyPropagator","category":"page"},{"location":"api/#PIMD.GeneralizedCayleyPropagator","page":"API","title":"PIMD.GeneralizedCayleyPropagator","text":"GeneralizedCayleyPropagator(system, generalizedCayleyFunction, Δt)\n\nCreates a generalized Cayley propagator that  PIMD internal potential using a generalized cayley function varphi\n\nboldsymbol zleftarrowvarphi(mathsf Jmathsf H)boldsymbol z\n\nExamples of generalized Cayley functions are exp(), cayley() and sqrtcayley() (recommended).\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"LangevinPropagator","category":"page"},{"location":"api/#PIMD.LangevinPropagator","page":"API","title":"PIMD.LangevinPropagator","text":"LangevinPropagator(system, Δt)\n\nCreates a propagator that thermostats momenta using Langevin equation\n\nboldsymbol pleftarrow e^-GammaDelta tboldsymbol p+sqrt1-e^-2GammaDelta tsqrtfracMbetaboldsymbolxi\n\nwhere boldsymbolxi is sampled from standard normal distribution and Gamma is determined by the characteristic frequency.\n\n\n\n\n\n","category":"type"},{"location":"manual/","page":"Manual","title":"Manual","text":"CurrentModule = PIMD","category":"page"},{"location":"manual/#PIMD","page":"Manual","title":"PIMD","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Modules = [PIMD]","category":"page"},{"location":"manual/#PIMD.Integrator","page":"Manual","title":"PIMD.Integrator","text":"Integrator(propagators...)\n\nConstructs an integrator from a series of propagator, so that within a time step these propagators act sequentially on the phase.\n\n\n\n\n\n","category":"type"},{"location":"manual/#PIMD.estimatorHessian","page":"Manual","title":"PIMD.estimatorHessian","text":"estimatorHessian(phase, system)\n\nEstimates the hessian for an isomorphic classical system under a phase.\n\nhat H(boldsymbol x)=frac1nsum_iV(x_i)\n\n\n\n\n\n","category":"function"},{"location":"manual/#PIMD.estimatorKinetic","page":"Manual","title":"PIMD.estimatorKinetic","text":"estimatorKinetic(phase, system)\n\nEstimates the kinetic energy (using the primitive estimator) for an isomorphic classical system under a phase.\n\nhat K_rm p(boldsymbol x)=frac n2beta-frac12boldsymbol x^Tmathsf Kboldsymbol x\n\n\n\n\n\n","category":"function"},{"location":"manual/#PIMD.estimatorKineticVirial","page":"Manual","title":"PIMD.estimatorKineticVirial","text":"estimatorKinetic(phase, system)\n\nEstimates the kinetic energy (using the virial estimator) for an isomorphic classical system under a phase.\n\nhat K_rm v(boldsymbol x)=frac 12beta+frac12n(bar x-boldsymbol x)partialvarphi(x)boldsymbol x\n\n\n\n\n\n","category":"function"},{"location":"manual/#PIMD.estimatorPotential","page":"Manual","title":"PIMD.estimatorPotential","text":"estimatorPotential(phase, system)\n\nEstimates the potential energy for an isomorphic classical system under a phase.\n\nhat V(boldsymbol x)=varphi(boldsymbol x)\n\n\n\n\n\n","category":"function"},{"location":"manual/#PIMD.md-Tuple{PIMD.Phase,ClassicalSystem,Integrator,Tuple{var\"#s26\",var\"#s27\"} where var\"#s27\"<:Integer where var\"#s26\"<:Integer,Array{var\"#s28\",1} where var\"#s28\"<:PIMD.Property}","page":"Manual","title":"PIMD.md","text":"md(initPhase, system, integrator!, timetable, properties)\n\nLaunches an MD simulation of system with the initial conditions initPhase and collect properties. During the simulation, integrator! is used to integrate the equations of motion. With timetable = (equilibrationSteps, sampleSteps), the system is first equilibrated for equilibrationSteps and then sampled for sampleSteps.\n\n\n\n\n\n","category":"method"}]
}
