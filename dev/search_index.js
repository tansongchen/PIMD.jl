var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = PIMD","category":"page"},{"location":"api/#PIMD","page":"API","title":"PIMD","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [PIMD]","category":"page"},{"location":"api/#PIMD.ExternalPotentialPropagator","page":"API","title":"PIMD.ExternalPotentialPropagator","text":"ExternalKineticPropagator(Δt)\n\nCreates a propagator that updates momenta according to the canonical equation, with PIMD external potential only\n\nboldsymbol pleftarrowboldsymbol p-fracpartial V_rm extpartialboldsymbol qDelta t\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.GeneralizedCayleyPropagator","page":"API","title":"PIMD.GeneralizedCayleyPropagator","text":"GeneralizedCayleyPropagator(system, generalizedCayleyFunction, Δt)\n\nCreates a generalized Cayley propagator that  PIMD internal potential using a generalized cayley function varphi\n\nboldsymbol zleftarrowvarphi(mathsf Jmathsf H)boldsymbol z\n\nExamples of generalized Cayley functions are exp(), cayley() and sqrtcayley() (recommended).\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.Integrator","page":"API","title":"PIMD.Integrator","text":"Integrator(propagators...)\n\nConstructs an integrator from a series of propagator, so that within a time step these propagators act sequentially on the phase.\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.KineticPropagator","page":"API","title":"PIMD.KineticPropagator","text":"KineticPropagator(Δt)\n\nCreates a propagator that updates positions according to the canonical equation\n\nboldsymbol qleftarrowboldsymbol q+fracpartial Hpartialboldsymbol pDelta t\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.LangevinPropagator","page":"API","title":"PIMD.LangevinPropagator","text":"LangevinPropagator(system, Δt)\n\nCreates a propagator that thermostats momenta using Langevin equation\n\nboldsymbol pleftarrow e^-GammaDelta tboldsymbol p+sqrt1-e^-2GammaDelta tsqrtfracMbetaboldsymbolxi\n\nwhere boldsymbolxi is sampled from standard normal distribution and Gamma is determined by the characteristic frequency.\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.Normal","page":"API","title":"PIMD.Normal","text":"Normal(quantum, n)\n\nCreates an normal isomorphic PIMD system from a quantum system, with beads number n.\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.OneDimensionalQuantumSystem","page":"API","title":"PIMD.OneDimensionalQuantumSystem","text":"OneDimensionalQuantumSystem(β, m, potential)\n\nCreates an 1D quantum system with temperature β and Hamiltonian H=p^22m+V(x).\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.PotentialPropagator","page":"API","title":"PIMD.PotentialPropagator","text":"KineticPropagator(Δt)\n\nCreates a propagator that updates momenta according to the canonical equation\n\nboldsymbol pleftarrowboldsymbol p-fracpartial Hpartialboldsymbol qDelta t\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.Primitive","page":"API","title":"PIMD.Primitive","text":"Primitive(quantum, n)\n\nCreates an primitive isomorphic PIMD system from a quantum system, with beads number n.\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.Staging","page":"API","title":"PIMD.Staging","text":"Staging(quantum, n)\n\nCreates an staging isomorphic PIMD system from a quantum system, with beads number n.\n\n\n\n\n\n","category":"type"},{"location":"api/#PIMD.estimatorHessian","page":"API","title":"PIMD.estimatorHessian","text":"estimatorHessian(phase, system)\n\nEstimates the hessian for an isomorphic classical system under a phase.\n\nhat H(boldsymbol x)=frac1nsum_iV(x_i)\n\n\n\n\n\n","category":"function"},{"location":"api/#PIMD.estimatorKinetic","page":"API","title":"PIMD.estimatorKinetic","text":"estimatorKinetic(phase, system)\n\nEstimates the kinetic energy (using the primitive estimator) for an isomorphic classical system under a phase.\n\nhat K_rm p(boldsymbol x)=frac n2beta-frac12boldsymbol x^Tmathsf Kboldsymbol x\n\n\n\n\n\n","category":"function"},{"location":"api/#PIMD.estimatorKineticVirial","page":"API","title":"PIMD.estimatorKineticVirial","text":"estimatorKinetic(phase, system)\n\nEstimates the kinetic energy (using the virial estimator) for an isomorphic classical system under a phase.\n\nhat K_rm v(boldsymbol x)=frac 12beta+frac12n(bar x-boldsymbol x)partialvarphi(x)boldsymbol x\n\n\n\n\n\n","category":"function"},{"location":"api/#PIMD.estimatorPotential","page":"API","title":"PIMD.estimatorPotential","text":"estimatorPotential(phase, system)\n\nEstimates the potential energy for an isomorphic classical system under a phase.\n\nhat V(boldsymbol x)=varphi(boldsymbol x)\n\n\n\n\n\n","category":"function"},{"location":"api/#PIMD.md-Tuple{PIMD.Phase,ClassicalSystem,Integrator,Tuple{var\"#s25\",var\"#s26\"} where var\"#s26\"<:Integer where var\"#s25\"<:Integer,Array{var\"#s27\",1} where var\"#s27\"<:Function}","page":"API","title":"PIMD.md","text":"md(initPhase, system, integrator!, timetable, properties)\n\nLaunches an MD simulation of system with the initial conditions initPhase and collect properties. During the simulation, integrator! is used to integrate the equations of motion. With timetable = (equilibrationSteps, sampleSteps), the system is first equilibrated for equilibrationSteps and then sampled for sampleSteps.\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"PIMD.jl is a comprehensive Julia implementation of path integral molecular dynamics for 1D model systems.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For the purpose of developing new ","category":"page"},{"location":"#Defining-a-quantum-system","page":"Introduction","title":"Defining a quantum system","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To define a one-dimensional quantum system we need temperature, mass and potential function. Pre-defined potential functions include harmonicPotential, weaklyAnharmonicPotential and quarticPotential. For example,","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"β, m, V = 1.2, 3.4, quarticPotential\nquantum = OneDimensionalQuantumSystem(β, m, V)","category":"page"},{"location":"#Defining-a-classical-isomorphic-system","page":"Introduction","title":"Defining a classical isomorphic system","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Classical isomorphic system is a system that correspond to an one-dimensional quantum system and gives the same statistical property in the infinite-bead limit. This package supports three types of classical isomorphic systems, namely Primitive, Normal and Staging.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"primitive = Primitive(quantum, 16)","category":"page"},{"location":"#Defining-a-integrator","page":"Introduction","title":"Defining a integrator","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"An integrator is a way to discretize the continuous-time evolution that is suitable for numerical integration. An integrator is further decomposed into a series of propagators that updates a specific part of the phase (e.g. the momentum, position or else). The simplest one is the Verlet, or second-order symplectic integrator:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"integrator = begin\n    B = PotentialPropagator(Δt / 2)\n    A = KineticPropagator(Δt)\n    Integrator(B, A, B)\nend","category":"page"},{"location":"#Defining-properties-and-run-simulation","page":"Introduction","title":"Defining properties and run simulation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We may choose several properties of interest, such as estimatorPotential, estimatorKinetic, estimatorKineticVirial to collect during our simulation. To run a simulation we simply need to initialize a phase and specify a list of properties, and call the main function md.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"properties = [estimatorPotential, estimatorKinetic]\ndata = md(phase, primitive, integrator, (10, 100), properties)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"data is a dict object from which the properties can be extracted as","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"potential = data[estimatorPotential]","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Please also view the next page for more detailed description of APIs.","category":"page"}]
}
